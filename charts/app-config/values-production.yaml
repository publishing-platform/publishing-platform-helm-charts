# Defaults for all apps in this environment. These can be overridden for
# individual apps below.

publishingPlatformEnvironment: production
externalDomainSuffix: publishing-platform.co.uk
k8sExternalDomainSuffix: eks.production.publishing-platform.top
publishingDomainSuffix: production.publishing.service.publishing-platform.co.uk
assetsDomain: assets.production.publishing.service.publishing-platform.co.uk

awsAccountId: "761018850167"

replicaCount: 3
workers:
  replicaCount: 3
podDisruptionBudget: &pdb
  maxUnavailable: 2

_alb-ingress-defaults: &alb-ingress-defaults
  alb.ingress.kubernetes.io/scheme: internet-facing
  alb.ingress.kubernetes.io/target-type: ip
  alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
  alb.ingress.kubernetes.io/ssl-redirect: "443"
  alb.ingress.kubernetes.io/healthcheck-path: /readyz
  alb.ingress.kubernetes.io/load-balancer-name: "{{ .Release.Name }}"
  # yamllint disable rule:line-length
  alb.ingress.kubernetes.io/load-balancer-attributes: >
    access_logs.s3.enabled=true,
    access_logs.s3.bucket=publishing-platform-{{ .Values.publishingPlatformEnvironment }}-aws-logging,
    access_logs.s3.prefix=elb/{{ .Release.Name }}

_alb-ingress-waf-ruleset-www: &alb-ingress-waf-ruleset-www
  alb.ingress.kubernetes.io/wafv2-acl-arn: >-
    {{ .Values.cachePublicWebAclArn }}

_alb-ingress-waf-ruleset-backend: &alb-ingress-waf-ruleset-backend
  alb.ingress.kubernetes.io/wafv2-acl-arn: >-
    {{ .Values.backendPublicWebAclArn }}

_alb-ingress-group-backend: &alb-ingress-group-backend
  <<: *alb-ingress-waf-ruleset-backend
  alb.ingress.kubernetes.io/group.name: backend
  alb.ingress.kubernetes.io/load-balancer-name: backend
  # yamllint disable rule:line-length
  alb.ingress.kubernetes.io/load-balancer-attributes: >
    access_logs.s3.enabled=true,
    access_logs.s3.bucket=publishing-platform-{{ .Values.publishingPlatformEnvironment }}-aws-logging,
    access_logs.s3.prefix=elb/backend

# Apps for Argo CD to deploy, along with any app-specific Helm values.

publishingPlatformApplications:
  - name: argo-services
    chartPath: charts/argo-services
    postSyncWorkflowEnabled: "false"
    helmValues:
      nextEnvironment: ""
      enableWebhookIngress: true

  - name: content-store
    helmValues: &content-store
      dbMigrationEnabled: true
      nginxClientMaxBodySize: 20M
      uploadAssets:
        enabled: false
      extraEnv:
        - name: PUBLISHING_PLATFORM_SSO_OAUTH_ID
          valueFrom:
            secretKeyRef:
              name: signon-app-content-store
              key: oauth_id
        - name: PUBLISHING_PLATFORM_SSO_OAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: signon-app-content-store
              key: oauth_secret
        - name: ROUTER_API_BEARER_TOKEN
          valueFrom:
            secretKeyRef:
              name: signon-token-content-store-router-api
              key: bearer_token
        - name: DEFAULT_TTL
          value: "300"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: content-store
              key: DATABASE_URL
        - name: WEB_CONCURRENCY
          value: '2'

  - name: draft-content-store
    repoName: content-store
    helmValues:
      <<: *content-store
      rails:
        createKeyBaseSecret: false
        # use the same secret as the live content-store, it will reduce toil
        secretKeyBaseName: content-store-rails-secret-key-base
      sentry:
        createSecret: false  # Sentry DSNs are per repo.
        dsnSecretName: content-store-sentry
      extraEnv:
        - name: SENTRY_ENVIRONMENT
          value: "draft-production"
        - name: PUBLISHING_PLATFORM_SSO_OAUTH_ID
          valueFrom:
            secretKeyRef:
              name: signon-app-draft-content-store
              key: oauth_id
        - name: PUBLISHING_PLATFORM_SSO_OAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: signon-app-draft-content-store
              key: oauth_secret
        - name: ROUTER_API_BEARER_TOKEN
          valueFrom:
            secretKeyRef:
              name: signon-token-draft-content-store-draft-router-api
              key: bearer_token
        - name: DEFAULT_TTL
          value: "1"
        - name: PUBLISHING_PLATFORM_LOCATION_HOSTNAME_PREFIX
          value: draft-
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: draft-content-store
              key: DATABASE_URL
        - name: WEB_CONCURRENCY
          value: '2'

  - name: external-secrets
    chartPath: charts/external-secrets
    postSyncWorkflowEnabled: "false"

  - name: publishing-api
    helmValues:
      dbMigrationEnabled: true
      uploadAssets:
        enabled: false
      workers:
        enabled: true
      redis:
        enabled: true
      extraEnv:
        - name: PUBLISHING_PLATFORM_SSO_OAUTH_ID
          valueFrom:
            secretKeyRef:
              name: signon-app-publishing-api
              key: oauth_id
        - name: PUBLISHING_PLATFORM_SSO_OAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: signon-app-publishing-api
              key: oauth_secret
        - name: CONTENT_STORE_BEARER_TOKEN
          valueFrom:
            secretKeyRef:
              name: signon-token-publishing-api-content-store
              key: bearer_token
        - name: DRAFT_CONTENT_STORE_BEARER_TOKEN
          valueFrom:
            secretKeyRef:
              name: signon-token-publishing-api-draft-content-store
              key: bearer_token
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: publishing-api
              key: RABBITMQ_URL
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: publishing-api
              key: DATABASE_URL

  - name: router-api
    helmValues: &router-api
      dbMigrationEnabled: true
      uploadAssets:
        enabled: false
      extraEnv:
        - name: PUBLISHING_PLATFORM_SSO_OAUTH_ID
          valueFrom:
            secretKeyRef:
              name: signon-app-router-api
              key: oauth_id
        - name: PUBLISHING_PLATFORM_SSO_OAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: signon-app-router-api
              key: oauth_secret
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: router-api
              key: DATABASE_URL

  - name: draft-router-api
    repoName: router-api
    helmValues:
      <<: *router-api
      rails:
        createKeyBaseSecret: false
        # use the same secret as the live router-api, it will reduce toil
        secretKeyBaseName: router-api-rails-secret-key-base
      sentry:
        createSecret: false  # Sentry DSNs are per repo.
        dsnSecretName: router-api-sentry
      extraEnv:
        - name: SENTRY_ENVIRONMENT
          value: "draft-production"
        - name: PUBLISHING_PLATFORM_SSO_OAUTH_ID
          valueFrom:
            secretKeyRef:
              name: signon-app-draft-router-api
              key: oauth_id
        - name: PUBLISHING_PLATFORM_SSO_OAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: signon-app-draft-router-api
              key: oauth_secret
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: draft-router-api
              key: DATABASE_URL

  - name: signon
    helmValues:
      dbMigrationEnabled: true
      ingress:
        enabled: true
        annotations:
          <<: [*alb-ingress-defaults, *alb-ingress-waf-ruleset-backend]
          external-dns.alpha.kubernetes.io/hostname: signon.{{ .Values.k8sExternalDomainSuffix }}
        hosts:
          - name: signon.{{ .Values.publishingDomainSuffix }}
      cronTasks:
        - name: fetch-organisations
          task: "organisations:fetch"
          schedule: "11 3 * * *"
          serviceAccount: signon
        - name: sync-app-secrets-to-k8s
          task: "kubernetes:sync_app_secrets"
          schedule: "8 1 * * *"
          serviceAccount: signon
        - name: sync-token-secrets-to-k8s
          task: "kubernetes:sync_token_secrets"
          schedule: "9 1 * * *"
          serviceAccount: signon
      extraEnv:
        - name: INSTANCE_NAME
          value: production
        - name: ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY
          valueFrom:
            secretKeyRef:
              name: signon
              key: ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY
        - name: ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY
          valueFrom:
            secretKeyRef:
              name: signon
              key: ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY
        - name: ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT
          valueFrom:
            secretKeyRef:
              name: signon
              key: ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: signon
              key: DATABASE_URL
        - name: DEVISE_PEPPER
          valueFrom:
            secretKeyRef:
              name: signon
              key: DEVISE_PEPPER
        - name: DEVISE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: signon
              key: DEVISE_SECRET_KEY
        - name: SMTP_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: signon
              key: SMTP_ENDPOINT
        - name: SMTP_PORT
          valueFrom:
            secretKeyRef:
              name: signon
              key: SMTP_PORT
        - name: SMTP_USERNAME
          valueFrom:
            secretKeyRef:
              name: signon
              key: SMTP_USERNAME
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: signon
              key: SMTP_PASSWORD
